{"version":3,"file":"browser.js","sources":["../src/config.ts","../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/crypto.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/@cmdcode/buff/dist/assert.js","../node_modules/@cmdcode/buff/dist/format/str.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/@cmdcode/buff/dist/encode.js","../node_modules/@cmdcode/buff/dist/format/big.js","../node_modules/@cmdcode/buff/dist/format/num.js","../node_modules/@cmdcode/buff/dist/utils.js","../node_modules/@cmdcode/buff/dist/format/buffer.js","../node_modules/@cmdcode/buff/dist/buff.js","../node_modules/@cmdcode/buff/dist/format/bin.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@cmdcode/crypto-tools/dist/lib/hash.js","../node_modules/@noble/curves/esm/abstract/utils.js","../node_modules/@noble/curves/esm/abstract/modular.js","../node_modules/@noble/curves/esm/abstract/curve.js","../node_modules/@noble/curves/esm/abstract/weierstrass.js","../node_modules/@noble/curves/esm/_shortw_utils.js","../node_modules/@noble/curves/esm/secp256k1.js","../node_modules/@cmdcode/crypto-tools/dist/const.js","../node_modules/@cmdcode/crypto-tools/dist/lib/point.js","../node_modules/@cmdcode/crypto-tools/dist/lib/math.js","../node_modules/@cmdcode/crypto-tools/dist/assert.js","../node_modules/@cmdcode/crypto-tools/dist/lib/ecc.js","../node_modules/@cmdcode/crypto-tools/dist/util.js","../node_modules/@cmdcode/crypto-tools/dist/lib/keys.js","../src/util.ts","../src/error.ts","../src/assert.ts","../src/pubkey.ts","../src/compute.ts","../src/context.ts","../src/nonce.ts","../src/keys.ts","../src/sign.ts","../src/verify.ts"],"sourcesContent":[null,"function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!isBytes(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","export function within_size(data, size) {\n    if (data.length > size) {\n        throw new TypeError(`Data is larger than array size: ${data.length} > ${size}`);\n    }\n}\nexport function is_hex(hex) {\n    if (hex.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid characters in hex string: ' + hex);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Length of hex string is invalid: ${hex.length}`);\n    }\n}\nexport function is_json(str) {\n    try {\n        JSON.parse(str);\n    }\n    catch {\n        throw new TypeError('JSON string is invalid!');\n    }\n}\nexport function is_safe_num(num) {\n    if (num > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('Number exceeds safe bounds!');\n    }\n}\nexport function is_prefix(actual, target) {\n    if (actual !== target) {\n        throw new TypeError(`Bech32 prefix does not match: ${actual} !== ${target}`);\n    }\n}\n//# sourceMappingURL=assert.js.map","import { is_hex } from '../assert.js';\nconst ec = new TextEncoder();\nconst dc = new TextDecoder();\nexport function strToBytes(str) {\n    return ec.encode(str);\n}\nexport function bytesToStr(bytes) {\n    return dc.decode(bytes);\n}\nfunction hex_size(hexstr, size) {\n    is_hex(hexstr);\n    const len = hexstr.length / 2;\n    if (size === undefined)\n        size = len;\n    if (len > size) {\n        throw new TypeError(`Hex string is larger than array size: ${len} > ${size}`);\n    }\n    return size;\n}\nexport function hexToBytes(hexstr, size, endian = 'le') {\n    size = hex_size(hexstr, size);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    for (let i = 0; i < hexstr.length; i += 2) {\n        const char = hexstr.substring(i, i + 2);\n        const num = parseInt(char, 16);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n    }\n    return new Uint8Array(buffer);\n}\nexport function bytesToHex(bytes) {\n    let chars = '';\n    for (let i = 0; i < bytes.length; i++) {\n        chars += bytes[i].toString(16).padStart(2, '0');\n    }\n    return chars;\n}\n//# sourceMappingURL=str.js.map","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexport const utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexport const base16 = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = /* @__PURE__ */ genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = /* @__PURE__ */ genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const createBase58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n// legacy export, bad name\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = /* @__PURE__ */ genBech32('bech32');\nexport const bech32m = /* @__PURE__ */ genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { sha256 } from '@noble/hashes/sha256';\nimport { bytesToStr, bytesToHex, hexToBytes, strToBytes } from './format/str.js';\nimport { base58check, base64, base64urlnopad, bech32, bech32m } from '@scure/base';\nexport const Hex = {\n    encode: bytesToHex,\n    decode: hexToBytes\n};\nexport const Txt = {\n    encode: strToBytes,\n    decode: bytesToStr\n};\nexport const B58chk = {\n    encode: (data) => base58check(sha256).encode(data),\n    decode: (data) => base58check(sha256).decode(data)\n};\nexport const Base64 = {\n    encode: (data) => base64.encode(data),\n    decode: (data) => base64.decode(data)\n};\nexport const B64url = {\n    encode: (data) => base64urlnopad.encode(data),\n    decode: (data) => base64urlnopad.decode(data)\n};\nexport const Bech32 = {\n    to_words: bech32.toWords,\n    to_bytes: bech32.fromWords,\n    encode: (prefix, words, limit = false) => {\n        return bech32.encode(prefix, words, limit);\n    },\n    decode: (data, limit = false) => {\n        const { prefix, words } = bech32.decode(data, limit);\n        return { prefix, words };\n    }\n};\nexport const Bech32m = {\n    to_words: bech32m.toWords,\n    to_bytes: bech32m.fromWords,\n    encode: (prefix, words, limit = false) => {\n        return bech32m.encode(prefix, words, limit);\n    },\n    decode: (data, limit = false) => {\n        const { prefix, words } = bech32m.decode(data, limit);\n        return { prefix, words };\n    }\n};\n//# sourceMappingURL=encode.js.map","const _0n = BigInt(0);\nconst _255n = BigInt(255);\nconst _256n = BigInt(256);\nfunction big_size(big) {\n    if (big <= 0xffn)\n        return 1;\n    if (big <= 0xffffn)\n        return 2;\n    if (big <= 0xffffffffn)\n        return 4;\n    if (big <= 0xffffffffffffffffn)\n        return 8;\n    if (big <= 0xffffffffffffffffffffffffffffffffn)\n        return 16;\n    if (big <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn) {\n        return 32;\n    }\n    throw new TypeError('Must specify a fixed buffer size for bigints greater than 32 bytes.');\n}\nexport function bigToBytes(big, size, endian = 'be') {\n    if (size === undefined)\n        size = big_size(big);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (big > _0n) {\n        const byte = big & _255n;\n        const num = Number(byte);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        big = (big - byte) / _256n;\n    }\n    return new Uint8Array(buffer);\n}\nexport function bytesToBig(bytes) {\n    let num = BigInt(0);\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * _256n) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\n//# sourceMappingURL=big.js.map","import { is_safe_num } from '../assert.js';\nfunction num_size(num) {\n    if (num <= 0xFF)\n        return 1;\n    if (num <= 0xFFFF)\n        return 2;\n    if (num <= 0xFFFFFFFF)\n        return 4;\n    throw new TypeError('Numbers larger than 4 bytes must specify a fixed size!');\n}\nexport function numToBytes(num, size, endian = 'be') {\n    if (size === undefined)\n        size = num_size(num);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (num > 0) {\n        const byte = num & 255;\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(buffer);\n}\nexport function bytesToNum(bytes) {\n    let num = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n        is_safe_num(num);\n    }\n    return num;\n}\n//# sourceMappingURL=num.js.map","import { within_size } from './assert.js';\nexport function is_hex(input) {\n    if (input.match(/[^a-fA-F0-9]/) === null &&\n        input.length % 2 === 0) {\n        return true;\n    }\n    return false;\n}\nexport function is_bytes(input) {\n    if (typeof input === 'string' && is_hex(input)) {\n        return true;\n    }\n    else if (typeof input === 'number' ||\n        typeof input === 'bigint' ||\n        input instanceof Uint8Array) {\n        return true;\n    }\n    else if (Array.isArray(input) &&\n        input.every(e => typeof e === 'number')) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function set_buffer(data, size, endian = 'be') {\n    if (size === undefined)\n        size = data.length;\n    within_size(data, size);\n    const buffer = new Uint8Array(size).fill(0);\n    const offset = (endian === 'be') ? 0 : size - data.length;\n    buffer.set(data, offset);\n    return buffer;\n}\nexport function join_array(arr) {\n    let i, offset = 0;\n    const size = arr.reduce((len, arr) => len + arr.length, 0);\n    const buff = new Uint8Array(size);\n    for (i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        buff.set(a, offset);\n        offset += a.length;\n    }\n    return buff;\n}\nexport function bigint_replacer(_, v) {\n    return typeof v === 'bigint'\n        ? `${v}n`\n        : v;\n}\nexport function bigint_reviver(_, v) {\n    return typeof v === 'string' && /^[0-9]+n$/.test(v)\n        ? BigInt(v.slice(0, -1))\n        : v;\n}\nexport function parse_data(data_blob, chunk_size, total_size) {\n    const len = data_blob.length, count = total_size / chunk_size;\n    if (total_size % chunk_size !== 0) {\n        throw new TypeError(`Invalid parameters: ${total_size} % ${chunk_size} !== 0`);\n    }\n    if (len !== total_size) {\n        throw new TypeError(`Invalid data stream: ${len} !== ${total_size}`);\n    }\n    if (len % chunk_size !== 0) {\n        throw new TypeError(`Invalid data stream: ${len} % ${chunk_size} !== 0`);\n    }\n    const chunks = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const idx = i * chunk_size;\n        chunks[i] = data_blob.subarray(idx, idx + chunk_size);\n    }\n    return chunks;\n}\n//# sourceMappingURL=utils.js.map","import { bigToBytes } from './big.js';\nimport { numToBytes } from './num.js';\nimport { hexToBytes } from './str.js';\nimport * as util from '../utils.js';\nexport function buffer_data(data, size, endian) {\n    if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    else if (data instanceof Uint8Array) {\n        return util.set_buffer(data, size, endian);\n    }\n    else if (Array.isArray(data)) {\n        const bytes = data.map(e => buffer_data(e, size, endian));\n        return util.join_array(bytes);\n    }\n    else if (typeof data === 'string') {\n        return hexToBytes(data, size, endian);\n    }\n    else if (typeof data === 'bigint') {\n        return bigToBytes(data, size, endian);\n    }\n    else if (typeof data === 'number') {\n        return numToBytes(data, size, endian);\n    }\n    else if (typeof data === 'boolean') {\n        return Uint8Array.of(data ? 1 : 0);\n    }\n    throw new TypeError('Unsupported format:' + String(typeof data));\n}\n//# sourceMappingURL=buffer.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport * as assert from './assert.js';\nimport * as encoder from './encode.js';\nimport * as fmt from './format/index.js';\nimport * as util from './utils.js';\nexport class Buff extends Uint8Array {\n    static { this.num = numToBuff; }\n    static { this.big = bigToBuff; }\n    static { this.bin = binToBuff; }\n    static { this.raw = rawToBuff; }\n    static { this.str = strToBuff; }\n    static { this.hex = hexToBuff; }\n    static { this.bytes = buffer; }\n    static { this.json = jsonToBuff; }\n    static { this.base64 = base64ToBuff; }\n    static { this.b64url = b64urlToBuff; }\n    static { this.bech32 = bech32ToBuff; }\n    static { this.bech32m = bech32mToBuff; }\n    static { this.b58chk = b58chkToBuff; }\n    static { this.encode = fmt.strToBytes; }\n    static { this.decode = fmt.bytesToStr; }\n    static { this.parse = parse_data; }\n    static { this.is_bytes = util.is_bytes; }\n    static { this.is_hex = util.is_hex; }\n    static { this.is_equal = is_equal; }\n    static random(size = 32) {\n        const rand = randomBytes(size);\n        return new Buff(rand, size);\n    }\n    static now(size = 4) {\n        const stamp = Math.floor(Date.now() / 1000);\n        return new Buff(stamp, size);\n    }\n    constructor(data, size, endian) {\n        if (data instanceof Buff &&\n            size === undefined) {\n            return data;\n        }\n        const buffer = fmt.buffer_data(data, size, endian);\n        super(buffer);\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.to_num();\n    }\n    get big() {\n        return this.to_big();\n    }\n    get str() {\n        return this.to_str();\n    }\n    get hex() {\n        return this.to_hex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bin() {\n        return this.to_bin();\n    }\n    get b58chk() {\n        return this.to_b58chk();\n    }\n    get base64() {\n        return this.to_base64();\n    }\n    get b64url() {\n        return this.to_b64url();\n    }\n    get digest() {\n        return this.to_hash();\n    }\n    get id() {\n        return this.to_hash().hex;\n    }\n    get stream() {\n        return new Stream(this);\n    }\n    to_num(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return fmt.bytesToNum(bytes);\n    }\n    to_big(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return fmt.bytesToBig(bytes);\n    }\n    to_bin() {\n        return fmt.bytesToBin(this);\n    }\n    to_hash() {\n        const digest = sha256(this);\n        return new Buff(digest);\n    }\n    to_json(reviver) {\n        if (reviver === undefined) {\n            reviver = util.bigint_reviver;\n        }\n        const str = fmt.bytesToStr(this);\n        return JSON.parse(str, reviver);\n    }\n    to_bech32(prefix, limit) {\n        const { encode, to_words } = encoder.Bech32;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_bech32m(prefix, limit) {\n        const { encode, to_words } = encoder.Bech32m;\n        const words = to_words(this);\n        return encode(prefix, words, limit);\n    }\n    to_str() { return fmt.bytesToStr(this); }\n    to_hex() { return fmt.bytesToHex(this); }\n    to_bytes() { return new Uint8Array(this); }\n    to_b58chk() { return encoder.B58chk.encode(this); }\n    to_base64() { return encoder.Base64.encode(this); }\n    to_b64url() { return encoder.B64url.encode(this); }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    equals(data) {\n        return buffer(data).hex === this.hex;\n    }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    reverse() {\n        const arr = new Uint8Array(this).reverse();\n        return new Buff(arr);\n    }\n    slice(start, end) {\n        const arr = new Uint8Array(this).slice(start, end);\n        return new Buff(arr);\n    }\n    set(array, offset) {\n        this.set(array, offset);\n    }\n    subarray(begin, end) {\n        const arr = new Uint8Array(this).subarray(begin, end);\n        return new Buff(arr);\n    }\n    write(bytes, offset) {\n        const b = Buff.bytes(bytes);\n        this.set(b, offset);\n    }\n    add_varint(endian) {\n        const size = Buff.calc_varint(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    toJSON() {\n        return this.hex;\n    }\n    toString() {\n        return this.hex;\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const bytes = arr.map(e => Buff.bytes(e));\n        const joined = util.join_array(bytes);\n        return new Buff(joined);\n    }\n    static sort(arr, size) {\n        const hex = arr.map(e => buffer(e, size).hex);\n        hex.sort();\n        return hex.map(e => Buff.hex(e, size));\n    }\n    static calc_varint(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n}\nfunction numToBuff(number, size, endian) {\n    return new Buff(number, size, endian);\n}\nfunction binToBuff(data, size, endian) {\n    return new Buff(fmt.binToBytes(data), size, endian);\n}\nfunction bigToBuff(bigint, size, endian) {\n    return new Buff(bigint, size, endian);\n}\nfunction rawToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction strToBuff(data, size, endian) {\n    return new Buff(fmt.strToBytes(data), size, endian);\n}\nfunction hexToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction jsonToBuff(data, replacer) {\n    if (replacer === undefined) {\n        replacer = util.bigint_replacer;\n    }\n    const str = JSON.stringify(data, replacer);\n    return new Buff(fmt.strToBytes(str));\n}\nfunction base64ToBuff(data) {\n    return new Buff(encoder.Base64.decode(data));\n}\nfunction b64urlToBuff(data) {\n    return new Buff(encoder.B64url.decode(data));\n}\nfunction bech32ToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = encoder.Bech32;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        assert.is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction bech32mToBuff(data, limit, chk_prefix) {\n    const { decode, to_bytes } = encoder.Bech32m;\n    const { prefix, words } = decode(data, limit);\n    const bytes = to_bytes(words);\n    if (typeof chk_prefix === 'string') {\n        assert.is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction b58chkToBuff(data) {\n    return new Buff(encoder.B58chk.decode(data));\n}\nfunction parse_data(data_blob, chunk_size, total_size) {\n    const bytes = fmt.buffer_data(data_blob);\n    const chunks = util.parse_data(bytes, chunk_size, total_size);\n    return chunks.map(e => Buff.bytes(e));\n}\nfunction is_equal(a, b) {\n    return new Buff(a).hex === new Buff(b).hex;\n}\nexport function buffer(bytes, size, end) {\n    return new Buff(bytes, size, end);\n}\nexport class Stream {\n    constructor(data) {\n        this.data = Buff.bytes(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff(this.data.slice(0, size));\n    }\n    read(size) {\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    read_varint(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).to_num(endian);\n            case (num === 0xFE):\n                return this.read(4).to_num(endian);\n            case (num === 0xFF):\n                return this.read(8).to_num(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n}\n//# sourceMappingURL=buff.js.map","export function binToBytes(binary) {\n    const bins = binary.split('').map(Number);\n    if (bins.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(bins.length / 8);\n    for (let i = 0, ct = 0; i < bins.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (bins[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nexport function bytesToBin(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin.join('');\n}\n//# sourceMappingURL=bin.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","import { pbkdf2 } from '@noble/hashes/pbkdf2';\nimport { sha256 as s256 } from '@noble/hashes/sha256';\nimport { sha512 as s512 } from '@noble/hashes/sha512';\nimport { ripemd160 as r160 } from '@noble/hashes/ripemd160';\nimport { hmac as HMAC } from '@noble/hashes/hmac';\nimport { Buff } from '@cmdcode/buff';\nexport function sha256(...data) {\n    const b = Buff.join(data);\n    return Buff.raw(s256(b));\n}\nexport function sha512(...data) {\n    const b = Buff.join(data);\n    return Buff.raw(s512(b));\n}\nexport function ripe160(...data) {\n    const b = Buff.join(data);\n    return Buff.raw(s512(b));\n}\nexport function hash256(...data) {\n    const b = Buff.join(data);\n    return Buff.raw(s256(s256(b)));\n}\nexport function hash160(...data) {\n    const b = Buff.join(data);\n    return Buff.raw(r160(s256(b)));\n}\nexport function hmac256(key, ...data) {\n    const k = Buff.bytes(key);\n    const b = Buff.join(data);\n    return Buff.raw(HMAC(s256, k, b));\n}\nexport function hmac512(key, ...data) {\n    const k = Buff.bytes(key);\n    const b = Buff.join(data);\n    return Buff.raw(HMAC(s512, k, b));\n}\nexport function taghash(tag) {\n    const hash = Buff.str(tag).digest;\n    return Buff.join([hash, hash]);\n}\nexport function hash340(tag, ...data) {\n    const hash = taghash(tag);\n    return Buff.join([hash, ...data]).digest;\n}\nexport function pkdf256(secret, salt, count = 2048) {\n    const sec = Buff.bytes(secret);\n    const slt = Buff.bytes(salt);\n    const key = pbkdf2(s256, sec, slt, { c: count, dkLen: 32 });\n    return Buff.raw(key);\n}\nexport function pkdf512(secret, salt, count = 2048) {\n    const sec = Buff.bytes(secret);\n    const slt = Buff.bytes(salt);\n    const key = pbkdf2(s512, sec, slt, { c: count, dkLen: 64 });\n    return Buff.raw(key);\n}\n//# sourceMappingURL=hash.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    let res = new Uint8Array(sum);\n    let pad = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!ut.isBytes(data))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { secp256k1 } from '@noble/curves/secp256k1';\nconst curve = secp256k1.CURVE;\nexport const _N = curve.n;\nexport const _P = curve.p;\nexport const _G = { x: curve.Gx, y: curve.Gy };\nexport const _0n = BigInt(0);\nexport const _1n = BigInt(1);\nexport const _2n = BigInt(2);\nexport const _3n = BigInt(3);\nexport const _4n = BigInt(4);\n//# sourceMappingURL=const.js.map","import { Buff } from '@cmdcode/buff';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { _1n } from '../const.js';\nconst ECPoint = secp256k1.ProjectivePoint;\nexport const Noble = ECPoint;\nexport function is_even(p) {\n    const pa = new ECPoint(p.x, p.y, _1n);\n    return pa.hasEvenY();\n}\nexport function is_point(point) {\n    const p = point;\n    return ((typeof p === 'object' && p !== null) &&\n        (typeof p.x === 'bigint' && typeof p.y === 'bigint'));\n}\nexport function is_valid(point) {\n    if (!is_point(point))\n        return false;\n    const pt = new ECPoint(point.x, point.y, _1n);\n    try {\n        pt.assertValidity();\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport function assert_valid(p) {\n    if (!is_valid(p)) {\n        throw new Error('ECC point is invalid: ' + String(p));\n    }\n}\nexport function negate(a) {\n    const pa = new ECPoint(a.x, a.y, _1n);\n    try {\n        const pc = pa.negate();\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nexport function add(a, b) {\n    if (a === null)\n        return b;\n    if (b === null)\n        return a;\n    const pa = new ECPoint(a.x, a.y, _1n);\n    const pb = new ECPoint(b.x, b.y, _1n);\n    try {\n        const pc = pa.add(pb);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nexport function sub(a, b) {\n    if (a === null)\n        return b;\n    if (b === null)\n        return a;\n    const pa = new ECPoint(a.x, a.y, _1n);\n    const pb = new ECPoint(b.x, b.y, _1n);\n    try {\n        const pc = pa.subtract(pb);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nexport function eq(a, b) {\n    if (a === null && b === null) {\n        return true;\n    }\n    if (a !== null && b !== null) {\n        return (a.x === b.x && a.y === b.y);\n    }\n    return false;\n}\nexport function mul(a, b) {\n    if (a === null)\n        return null;\n    try {\n        const buff = Buff.bytes(b);\n        const pa = new ECPoint(a.x, a.y, _1n);\n        const pc = pa.multiply(buff.big);\n        pc.assertValidity();\n        return { x: pc.x, y: pc.y };\n    }\n    catch {\n        return null;\n    }\n}\nexport function gen(b) {\n    const buff = Buff.bytes(b);\n    const base = ECPoint.BASE;\n    const pt = base.multiply(buff.big);\n    pt.assertValidity();\n    return { x: pt.x, y: pt.y };\n}\nexport function lift_x(bytes, xonly = false) {\n    let key = Buff.bytes(bytes);\n    if (key.length === 32) {\n        key = key.prepend(0x02);\n    }\n    if (xonly && key[0] !== 0x02) {\n        key[0] = 0x02;\n    }\n    const point = ECPoint.fromHex(key.hex);\n    point.assertValidity();\n    return { x: point.x, y: point.y };\n}\nexport function to_bytes(p) {\n    const bytes = Buff.big(p.x, 32);\n    const parity = is_even(p) ? 0x02 : 0x03;\n    return Buff.join([parity, bytes]);\n}\n//# sourceMappingURL=point.js.map","import { Buff } from '@cmdcode/buff';\nimport { Field, FpSqrt } from '@noble/curves/abstract/modular';\nimport { mod, pow } from '@noble/curves/abstract/modular';\nimport { _N, _P, _0n } from '../const.js';\nexport { mod, pow, pow2, invert, } from '@noble/curves/abstract/modular';\nexport * as pt from './point.js';\nexport const fd = Field(_N, 32, true);\nexport const GF = Field;\nexport const mod_n = (x) => mod(x, _N);\nexport const mod_p = (x) => mod(x, _P);\nexport const pow_n = (x, exp) => pow(x, exp, _N);\nexport const sqrt_n = FpSqrt(_N);\nexport const sqrt_p = FpSqrt(_P);\nexport const on_curve = (x) => {\n    return typeof x === 'bigint' && _0n < x && x < _P;\n};\nexport const in_field = (x) => {\n    return typeof x === 'bigint' && _0n < x && x < _N;\n};\nexport function mod_bytes(bytes) {\n    const b = Buff.bytes(bytes).big;\n    return Buff.big(mod_n(b), 32);\n}\n//# sourceMappingURL=math.js.map","import { Buff } from '@cmdcode/buff';\nimport { _N, _P, _0n } from './const.js';\nexport function ok(value, message) {\n    if (value === false)\n        throw new Error(message ?? 'Assertion failed!');\n}\nexport function fail(error, throws = false) {\n    if (!throws)\n        return false;\n    throw new Error(error);\n}\nexport function size(input, size, throws) {\n    const bytes = Buff.bytes(input);\n    if (bytes.length !== size) {\n        return fail(`Invalid byte size: ${bytes.hex} !== ${size}`, throws);\n    }\n    return true;\n}\nexport function exists(input) {\n    if (typeof input === 'undefined') {\n        throw new TypeError('Input is undefined!');\n    }\n    if (input === null) {\n        throw new TypeError('Input is null!');\n    }\n}\nexport function on_curve(x, throws) {\n    if (!(typeof x === 'bigint' && _0n < x && x < _P)) {\n        fail('x value is not on the curve!', throws);\n    }\n    return true;\n}\nexport function in_field(x, throws) {\n    if (!(typeof x === 'bigint' && _0n < x && x < _N)) {\n        fail('x value is not in the field!', throws);\n    }\n    return true;\n}\nexport function valid_chain(path, code) {\n    if (code === undefined) {\n        if (!path.startsWith('m')) {\n            throw new Error('You need to specify a chain-code for a non-root path.');\n        }\n    }\n    else {\n        if (Buff.bytes(code).length !== 32) {\n            throw new Error('Chain code must be 32 bytes!');\n        }\n    }\n}\nexport function valid_path(path) {\n    const regex = /^(m)?(\\/)?(\\w+'?\\/)*\\w+'?$/;\n    if (path !== '' && path.match(regex) === null) {\n        throw new Error('Provided path string is invalid: ' + path);\n    }\n}\nexport function valid_hash(hash) {\n    const regex = /^[0-9a-fA-F]{64}$/;\n    if (hash.match(regex) === null) {\n        throw new Error('Provided hash string is invalid: ' + hash);\n    }\n}\nexport function valid_index(index) {\n    if (index > 0x80000000) {\n        throw new TypeError('Index value must not exceed 31 bits.');\n    }\n}\nexport function valid_pubkey(pubkey) {\n    const key = Buff.bytes(pubkey);\n    if (key.length !== 33) {\n        throw new TypeError('Index value must not exceed 31 bits.');\n    }\n}\nexport function valid_derive_state(hardened, is_private) {\n    if (hardened && !is_private) {\n        throw new Error('Cannot derive hardedened paths when is_private is false!');\n    }\n}\n//# sourceMappingURL=assert.js.map","import { Buff } from '@cmdcode/buff';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { _N, _P, _G } from '../const.js';\nimport * as math from './math.js';\nimport * as assert from '../assert.js';\nconst NoblePoint = secp256k1.ProjectivePoint;\nexport class Field extends Uint8Array {\n    static { this.N = _N; }\n    static add(x) {\n        return x.map(e => Field.mod(e)).reduce((p, n) => p.add(n));\n    }\n    static mod(x) {\n        return new Field(x);\n    }\n    static mul(x) {\n        return x.map(e => Field.mod(e)).reduce((p, n) => p.mul(n));\n    }\n    static is_valid(value, throws) {\n        const big = Buff.bytes(value, 32).big;\n        return assert.in_field(big, throws);\n    }\n    static random() {\n        return Field.mod(Buff.random(32));\n    }\n    constructor(x) {\n        const b = math.mod_n(normalizeField(x));\n        Field.is_valid(b, true);\n        super(Buff.big(b, 32), 32);\n    }\n    get buff() {\n        return new Buff(this);\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get big() {\n        return this.buff.big;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get point() {\n        return this.generate();\n    }\n    get hasOddY() {\n        return this.point.hasOddY;\n    }\n    get negated() {\n        return (this.hasOddY)\n            ? this.negate()\n            : this;\n    }\n    gt(value) {\n        const x = new Field(value);\n        return x.big > this.big;\n    }\n    lt(value) {\n        const x = new Field(value);\n        return x.big < this.big;\n    }\n    eq(value) {\n        const x = new Field(value);\n        return x.big === this.big;\n    }\n    ne(value) {\n        const x = new Field(value);\n        return x.big !== this.big;\n    }\n    add(value) {\n        const x = Field.mod(value);\n        const a = math.fd.add(this.big, x.big);\n        return new Field(a);\n    }\n    sub(value) {\n        const x = Field.mod(value);\n        const a = math.fd.sub(this.big, x.big);\n        return new Field(a);\n    }\n    mul(value) {\n        const x = Field.mod(value);\n        const a = math.fd.mul(this.big, x.big);\n        return new Field(a);\n    }\n    pow(value) {\n        const x = Field.mod(value);\n        const a = math.fd.pow(this.big, x.big);\n        return new Field(a);\n    }\n    div(value) {\n        const x = Field.mod(value);\n        const a = math.fd.div(this.big, x.big);\n        return new Field(a);\n    }\n    negate() {\n        return new Field(Field.N - this.big);\n    }\n    generate() {\n        const base = secp256k1.ProjectivePoint.BASE;\n        const point = base.multiply(this.big);\n        return Point.import(point);\n    }\n}\nexport class Point {\n    static { this.P = _P; }\n    static { this.G = new Point(_G.x, _G.y); }\n    static { this.curve = secp256k1.CURVE; }\n    static { this.base = secp256k1.ProjectivePoint.BASE; }\n    static from_x(bytes, even_y = false) {\n        let cp = normalizePoint(bytes);\n        if (cp.length === 32) {\n            cp = cp.prepend(0x02);\n        }\n        else if (even_y) {\n            cp[0] = 0x02;\n        }\n        assert.size(cp, 33);\n        const point = NoblePoint.fromHex(cp.hex);\n        point.assertValidity();\n        return new Point(point.x, point.y);\n    }\n    static generate(value) {\n        const field = Field.mod(value);\n        const point = Point.base.multiply(field.big);\n        return Point.import(point);\n    }\n    static { this.mul = Point.generate; }\n    static import(point) {\n        const p = (point instanceof Point)\n            ? { x: point.x.big, y: point.y.big }\n            : { x: point.x, y: point.y };\n        return new Point(p.x, p.y);\n    }\n    constructor(x, y) {\n        this._p = new NoblePoint(x, y, 1n);\n        this.p.assertValidity();\n    }\n    get p() {\n        return this._p;\n    }\n    get x() {\n        return Buff.big(this.p.x, 32);\n    }\n    get y() {\n        return Buff.big(this.p.y, 32);\n    }\n    get buff() {\n        return Buff.raw(this.p.toRawBytes(true));\n    }\n    get raw() {\n        return this.buff.raw;\n    }\n    get hex() {\n        return this.buff.hex;\n    }\n    get hasEvenY() {\n        return this.p.hasEvenY();\n    }\n    get hasOddY() {\n        return !this.p.hasEvenY();\n    }\n    get negated() {\n        return (this.hasOddY)\n            ? this.negate()\n            : this;\n    }\n    eq(value) {\n        const p = (value instanceof Point) ? value : Point.from_x(value);\n        return this.x.big === p.x.big && this.y.big === p.y.big;\n    }\n    add(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.add(x.p))\n            : Point.import(this.p.add(Point.generate(x).p));\n    }\n    sub(x) {\n        return (x instanceof Point)\n            ? Point.import(this.p.subtract(x.p))\n            : Point.import(this.p.subtract(Point.generate(x).p));\n    }\n    mul(value) {\n        return (value instanceof Point)\n            ? Point.import(this.p.multiply(value.x.big))\n            : Point.import(this.p.multiply(Field.mod(value).big));\n    }\n    negate() {\n        return Point.import(this.p.negate());\n    }\n}\nfunction normalizeField(value) {\n    if (value instanceof Field) {\n        return value.big;\n    }\n    if (value instanceof Point) {\n        return value.x.big;\n    }\n    if (value instanceof Uint8Array) {\n        return Buff.raw(value).big;\n    }\n    if (typeof value === 'string') {\n        return Buff.hex(value).big;\n    }\n    if (typeof value === 'number') {\n        return Buff.num(value).big;\n    }\n    if (typeof value === 'bigint') {\n        return BigInt(value);\n    }\n    throw TypeError('Invalid input type:' + typeof value);\n}\nfunction normalizePoint(value) {\n    if (value instanceof Field) {\n        return value.point.buff;\n    }\n    if (value instanceof Point) {\n        return value.buff;\n    }\n    if (value instanceof Uint8Array ||\n        typeof value === 'string') {\n        return Buff.bytes(value);\n    }\n    if (typeof value === 'number' ||\n        typeof value === 'bigint') {\n        return Buff.bytes(value, 32);\n    }\n    throw new TypeError(`Unknown type: ${typeof value}`);\n}\n//# sourceMappingURL=ecc.js.map","import { Buff } from '@cmdcode/buff';\nexport function random(size) {\n    return Buff.random(size);\n}\nexport function increment_buffer(buffer) {\n    let i = buffer.length - 1;\n    for (i; i >= 0; i--) {\n        if (buffer[i] < 255) {\n            buffer.set([buffer[i] + 1], i);\n            return buffer;\n        }\n    }\n    throw TypeError('Unable to increment buffer: ' + buffer.toString());\n}\nexport function stringify(content) {\n    switch (typeof content) {\n        case 'object':\n            return JSON.stringify(content);\n        case 'string':\n            return content;\n        case 'bigint':\n            return content.toString();\n        case 'number':\n            return content.toString();\n        case 'boolean':\n            return String(content);\n        default:\n            throw new TypeError('Content type not supported: ' + typeof content);\n    }\n}\n//# sourceMappingURL=util.js.map","import { Buff } from '@cmdcode/buff';\nimport { Field, Point } from './ecc.js';\nimport { random } from '../util.js';\nexport function is_even_pub(pubkey) {\n    const pub = Buff.bytes(pubkey);\n    switch (true) {\n        case (pub.length === 32):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x02):\n            return true;\n        case (pub.length === 33 && pub[0] === 0x03):\n            return false;\n        default:\n            throw new TypeError(`Invalid public key: ${pub.hex}`);\n    }\n}\nexport function gen_seckey(even_y) {\n    return get_seckey(random(32), even_y);\n}\nexport function get_seckey(secret, even_y = false) {\n    const sec = Field.mod(secret);\n    return (even_y) ? sec.negated.buff : sec.buff;\n}\nexport function get_pubkey(seckey, x_only = false) {\n    const p = Field.mod(seckey).point;\n    return (x_only) ? p.x : p.buff;\n}\nexport function tweak_seckey(seckey, tweaks = [], even_y = false) {\n    let sec = Field.mod(seckey);\n    for (const twk of tweaks) {\n        sec = sec.add(twk);\n        if (even_y)\n            sec = sec.negated;\n    }\n    return sec.buff;\n}\nexport function tweak_pubkey(pubkey, tweaks = [], x_only = false) {\n    let pub = Point.from_x(pubkey, x_only);\n    for (const twk of tweaks) {\n        pub = pub.add(twk);\n        if (x_only)\n            pub = pub.negated;\n    }\n    return (x_only) ? pub.x : pub.buff;\n}\nexport function parse_pubkey(pubkey, xonly) {\n    return (xonly)\n        ? convert_32b(pubkey)\n        : convert_33b(pubkey);\n}\nexport function get_keypair(secret, x_only, even_y) {\n    const sec = get_seckey(secret, even_y);\n    const pub = get_pubkey(sec, x_only);\n    return [sec, pub];\n}\nexport function gen_keypair(x_only, even_y) {\n    const sec = random(32);\n    return get_keypair(sec, x_only, even_y);\n}\nexport function convert_32b(pubkey) {\n    const key = Buff.bytes(pubkey);\n    if (key.length === 32)\n        return key;\n    if (key.length === 33)\n        return key.slice(1, 33);\n    throw new TypeError(`Invalid key length: ${key.length}`);\n}\nexport function convert_33b(pubkey, even_y = false) {\n    const key = Buff.bytes(pubkey);\n    if (key.length === 32) {\n        return key.prepend(0x02);\n    }\n    else if (key.length === 33) {\n        if (even_y)\n            key[0] = 0x02;\n        return key;\n    }\n    throw new TypeError(`Invalid key size: ${key.length}`);\n}\nexport function has_key(key, keys) {\n    const str = keys.map(e => Buff.bytes(e).hex);\n    return str.includes(Buff.bytes(key).hex);\n}\nexport function sort_keys(keys) {\n    return keys\n        .map(e => Buff.bytes(e).hex)\n        .sort()\n        .map(e => Buff.hex(e));\n}\n//# sourceMappingURL=keys.js.map",null,null,null,null,null,null,null,null,null,null],"names":["MUSIG_DEFAULTS","nonce_tweaks","pubkey_tweaks","musig_config","options","number","n","Number","isSafeInteger","Error","bytes","b","lengths","a","Uint8Array","constructor","name","length","includes","exists","instance","checkFinished","destroyed","finished","crypto","globalThis","undefined","isBytes","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","outputLen","blockLen","create","randomBytes","bytesLength","getRandomValues","SHA2","padOffset","isLE","super","pos","view","len","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","output","fill","i","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","Maj","c","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","sha256","is_safe_num","num","MAX_SAFE_INTEGER","TypeError","is_prefix","actual","target","ec","dc","TextDecoder","strToBytes","bytesToStr","decode","hex_size","hexstr","size","hex","match","is_hex","chain","args","id","wrap","map","x","reduceRight","reduce","alphabet","digits","Array","isArray","input","letter","index","indexOf","join","separator","from","split","convertRadix","forEach","d","carry","done","digit","digitBase","rounded","floor","push","reverse","gcd","radix2carry","convertRadix2","padding","mask","radix2","bits","revPadding","unsafeWrapper","fn","apply","e","base64","chr","end","base64urlnopad","genBase58","abc","base58","base58check","checksum","payload","newChecksum","oldChecksum","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","lowered","toLowerCase","toUpperCase","sepIndex","lastIndexOf","sum","endsWith","actualLength","decodeToBytes","decodeUnsafe","bech32","bech32m","B58chk","Base64","B64url","Bech32","to_words","to_bytes","Bech32m","_0n","_255n","_256n","bigToBytes","big","endian","big_size","use_le","ArrayBuffer","byte","setUint8","numToBytes","num_size","is_bytes","every","set_buffer","within_size","join_array","buff","bigint_replacer","_","bigint_reviver","test","buffer_data","util.set_buffer","util.join_array","char","substring","parseInt","hexToBytes","of","String","Buff","numToBuff","bigToBuff","bin","binToBuff","raw","rawToBuff","strToBuff","hexToBuff","json","jsonToBuff","base64ToBuff","b64url","b64urlToBuff","bech32ToBuff","bech32mToBuff","b58chk","b58chkToBuff","fmt.strToBytes","fmt.bytesToStr","parse","parse_data","util.is_bytes","util.is_hex","is_equal","random","rand","now","stamp","Date","fmt.buffer_data","to_num","to_big","to_str","to_hex","to_bin","to_b58chk","to_base64","to_b64url","to_hash","stream","Stream","fmt.bytesToNum","fmt.bytesToBig","count","fmt.bytesToBin","to_json","reviver","util.bigint_reviver","JSON","to_bech32","encoder.Bech32","to_bech32m","encoder.Bech32m","chars","toString","padStart","fmt.bytesToHex","encoder.B58chk","encoder.Base64","encoder.B64url","append","equals","prepend","start","array","begin","write","add_varint","calc_varint","toJSON","joined","sort","binary","bins","ct","j","fmt.binToBytes","bigint","replacer","util.bigint_replacer","stringify","chk_prefix","assert.is_prefix","data_blob","chunk_size","total_size","chunks","idx","util.parse_data","peek","read","chunk","read_varint","HMAC","hash","_key","assertHash","key","iHash","pad","oHash","buf","assertExists","assertBytes","Object","getPrototypeOf","hmac","message","hash340","tag","taghash","_1n","_2n","hexes","bytesToHex","numberToHexUnpadded","hexToNumber","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","hl","al","ai","hi","n1","n2","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","concatBytes","arrays","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","pred","validatorFns","val","function","boolean","string","stringOrUint8Array","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","diff","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","invert","u","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","add","p","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","lastMultiplied","acc","inverted","FpInvertBatch","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateBasic","curve","Gx","Gy","b2n","h2b","ut","DER","Err","_parseInt","toSig","ut.isBytes","sBytes","s","rBytesLeft","hexFromSig","sig","shl","rhl","rl","weierstrassPoints","opts","CURVE","ut.validateObject","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","ut.concatBytes","y","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","ut.bytesToHex","ut.bytesToNumberBE","error","mod.mod","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","fromAffine","normalizeZ","points","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","z","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","condition","item","W","windows","elm","precomputeWindow","base","window","precomputes","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","mod.invert","cat","head","y2","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","mod.getMinHashLength","fieldLen","minLen","reduced","mod.mapHashToField","precompute","isProbPub","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","q","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","ut.createHmacDrbg","drbg","verify","signature","publicKey","sg","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","_N","_P","_G","ECPoint","is_even","assert_valid","is_point","pt","is_valid","pa","pb","pc","lift_x","xonly","parity","fd","mod_n","pow_n","exp","in_field","fail","throws","NoblePoint","N","assert.in_field","math.mod_n","normalizeField","generate","hasOddY","negated","gt","lt","eq","ne","math.fd","import","from_x","even_y","cp","normalizePoint","assert.size","_p","get_seckey","secret","sec","get_pubkey","seckey","x_only","get_keypair","convert_32b","pubkey","sort_keys","keys","parse_points","pt.to_bytes","parse_psig","psig","nonces","hexify","KeyOperationError","report","reason","ok","nonce_total_size","nonce","nonce_key_size","valid_nonce_group","pub_nonces","math.in_field","valid_point","math.pt.assert_valid","combine_pubkeys","pubkeys","compute_group_hash","coeffs","group_P","pt.lift_x","pt.add","pt.mul","assert.valid_point","get_key_coeff","pkv","find","CONST","get_pt_state","int_pt","adaptors","tweaks","twk","mod_bytes","pts","tweak","pt.is_even","pt.assert_valid","at","get_key_ctx","key_coeffs","int_state","int_pubkey","group_state","group_pubkey","pub_keys","get_nonce_ctx","grp_pubkey","group_nonce","assert.valid_nonce_group","members","group_R","CONST._G","util.parse_points","combine_nonces","nonce_coeff","group_key","gpx","coeff","get_nonce_coeff","R_point","ncoeff","NC","compute_R","int_R","int_rx","nonce_state","group_rx","challenge","group_pub","grx","get_challenge","create_ctx","key_ctx","non_ctx","config","keys.get_seckey","keys.get_pubkey","keys.get_keypair","get_sec_nonce","get_pub_nonce","sec_nonce","get_nonce_pair","combine_psigs","context","signatures","sigs","CONST._0n","s_i","combine_s","keys.convert_32b","SAFE_MIN_VALUE","adapters","T","pub","p_v","csig","secret_key","key_coeff","ps","compute_ps","cosig","snonce","snp","pn","n_v","sn","sns","ncf","apply_sn","ctx","obj","sk","cha","sec_nonces","compute_s","adapter_pks","assert.ok","rS","pt.sub","pt.gen","assert.exists","rx","SP","kvec","g_P","coef","R_sP","R_s","S1","S2"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]}